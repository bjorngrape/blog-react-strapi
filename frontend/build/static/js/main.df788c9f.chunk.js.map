{"version":3,"sources":["components/Query/index.js","queries/category/categories.js","components/Nav/index.js","components/Card/index.js","components/Articles/index.js","queries/article/articles.js","containers/Articles/index.js","queries/article/article.js","containers/Article/index.js","queries/category/articles.js","containers/Category/index.js","containers/App/index.js","utils/apolloClient.js","index.js"],"names":["Query","children","query","id","useQuery","variables","data","loading","error","JSON","stringify","CATEGORIES_QUERY","gql","Nav","categories","className","data-uk-navbar","to","map","category","i","key","name","Card","article","imageUrl","image","url","src","alt","height","title","Articles","articles","leftArticlesCount","Math","ceil","length","leftArticles","slice","rightArticles","data-uk-grid","ARTICLES_QUERY","Home","ARTICLE_QUERY","Article","useParams","data-src","data-srcset","data-uk-img","source","content","format","published_at","CATEGORY_ARTICLES_QUERY","Category","App","path","component","exact","cache","InMemoryCache","link","HttpLink","uri","process","client","ApolloClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df788c9f.chunk.js","sourcesContent":["// REUSABLE QUERY COMPONENT\n\n/* Apollo will fetch data from different pages i.e. no need to rewrite the same code every time in different pages. */\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\"; // using the useQuery hook to call my Strapi server at this address http://localhost:1337/graphql\n\nconst Query = ({ children, query, id }) => {\n  const { data, loading, error } = useQuery(query, {\n    variables: { id: id } // sending an id if it exists (necessary when you'll want to fetch just one article)\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {JSON.stringify(error)}</p>;\n  return children({ data }); // If the request is successful, it will return the child component with the retrieved data as prop\n};\n\nexport default Query;","// GraphQL query to display categories\n\nimport gql from \"graphql-tag\";\n\nconst CATEGORIES_QUERY = gql`\n  query Categories {\n    categories {\n      id\n      name\n    }\n  }\n`;\n\nexport default CATEGORIES_QUERY;","// NAVBAR\n\nimport React from \"react\";\nimport Query from \"../Query\";\nimport { Link } from \"react-router-dom\";\n\nimport CATEGORIES_QUERY from \"../../queries/category/categories\"; // using query to display categories inside navbar\n\nconst Nav = () => {\n  return (\n    <div>\n      <Query query={CATEGORIES_QUERY} id={null}>\n        {({ data: { categories } }) => {\n          return (\n            <div>\n              <nav className=\"uk-navbar-container\" data-uk-navbar>\n                <div className=\"uk-navbar-left\">\n                  <ul className=\"uk-navbar-nav\">\n                    <li>\n                      <Link to=\"/\">A Nifty Blog Made with Strapi and React</Link>\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"uk-navbar-right\">\n                  <ul className=\"uk-navbar-nav\">\n                    {categories.map((category, i) => {\n                      return (\n                        <li key={category.id}>\n                          <Link\n                            to={`/category/${category.id}`}\n                            className=\"uk-link-reset\"\n                          >\n                            {category.name}\n                          </Link>\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </div>\n              </nav>\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Nav;","// Card component that will display each article\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Card = ({ article }) => {\n  const imageUrl =\n    process.env.NODE_ENV !== \"development\"\n      ? article.image.url\n      : process.env.REACT_APP_BACKEND_URL + article.image.url;\n  return (\n    <Link to={`/article/${article.id}`} className=\"uk-link-reset\">\n      <div className=\"uk-card uk-card-muted\">\n        <div className=\"uk-card-media-top\">\n          <img\n            src={imageUrl}\n            alt={article.image.url}\n            height=\"100\"\n          />\n        </div>\n        <div className=\"uk-card-body\">\n          <p id=\"category\" className=\"uk-text-uppercase\">\n            {article.category.name}\n          </p>\n          <p id=\"title\" className=\"uk-text-large\">\n            {article.title}\n          </p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Card;","// Articles component that will display all articles\n\nimport React from \"react\";\nimport Card from \"../Card\";\n\nconst Articles = ({ articles }) => {\n  const leftArticlesCount = Math.ceil(articles.length / 5);\n  const leftArticles = articles.slice(0, leftArticlesCount);\n  const rightArticles = articles.slice(leftArticlesCount, articles.length);\n\n  return (\n    <div>\n      <div className=\"uk-child-width-1-2\" data-uk-grid>\n        <div>\n          {leftArticles.map((article, i) => {\n            return <Card article={article} key={`article__${article.id}`} />;\n          })}\n        </div>\n        <div>\n          <div className=\"uk-child-width-1-2@m uk-grid-match\" data-uk-grid>\n            {rightArticles.map((article, i) => {\n              return <Card article={article} key={`article__${article.id}`} />;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Articles;","// query to fetch all the articles\n\nimport gql from \"graphql-tag\";\n\nconst ARTICLES_QUERY = gql`\n  query Articles {\n    articles {\n      id\n      title\n      category {\n        id\n        name\n      }\n      image {\n        url\n      }\n    }\n  }\n`;\n\nexport default ARTICLES_QUERY;","import React from \"react\";\nimport Articles from \"../../components/Articles\";\nimport Query from \"../../components/Query\";\nimport ARTICLES_QUERY from \"../../queries/article/articles\";\n\n\n// container to wrap a component that will display all articles\nconst Home = () => {\n  return (\n    <div>\n      <div className=\"uk-section\">\n        <div className=\"uk-container uk-container-large\">\n          <h1>Blog</h1>\n          <Query query={ARTICLES_QUERY}>\n            {({ data: { articles } }) => {\n              return <Articles articles={articles} />;\n            }}\n          </Query>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;","import gql from \"graphql-tag\";\n\nconst ARTICLE_QUERY = gql`\n  query Articles($id: ID!) {\n    article(id: $id) {\n      id\n      title\n      content\n      image {\n        url\n      }\n      category {\n        id\n        name\n      }\n      published_at\n    }\n  }\n`;\n\nexport default ARTICLE_QUERY;","// Article container\n\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport Query from \"../../components/Query\";\nimport ReactMarkdown from \"react-markdown\";\nimport Moment from \"react-moment\";\n\nimport ARTICLE_QUERY from \"../../queries/article/article\";\n\nconst Article = () => {\n  let { id } = useParams();\n  return (\n    <Query query={ARTICLE_QUERY} id={id}>\n      {({ data: { article } }) => {\n        const imageUrl =\n          process.env.NODE_ENV !== \"development\"\n            ? article.image.url\n            : process.env.REACT_APP_BACKEND_URL + article.image.url;\n        return (\n          <div>\n            <div\n              id=\"banner\"\n              className=\"uk-height-medium uk-flex uk-flex-center uk-flex-middle uk-background-cover uk-light uk-padding uk-margin\"\n              data-src={imageUrl}\n              data-srcset={imageUrl}\n              data-uk-img\n            >\n              <h1>{article.title}</h1>\n            </div>\n\n            <div className=\"uk-section\">\n              <div className=\"uk-container uk-container-small\">\n                <ReactMarkdown source={article.content} />\n                <p>\n                  <Moment format=\"MMM Do YYYY\">{article.published_at}</Moment>\n                </p>\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default Article;","import gql from 'graphql-tag';\n\nconst CATEGORY_ARTICLES_QUERY = gql`\n  query Category($id: ID!){\n    category(id: $id) {\n      name\n      articles {\n           id\n        title\n        content\n        image {\n          url\n        }\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default CATEGORY_ARTICLES_QUERY;","// page for each category to seperate different articles\n\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport Articles from \"../../components/Articles\";\nimport Query from \"../../components/Query\";\nimport CATEGORY_ARTICLES_QUERY from \"../../queries/category/articles\";\n\nconst Category = () => {\n  let { id } = useParams();\n\n  return (\n    <Query query={CATEGORY_ARTICLES_QUERY} id={id}>\n      {({ data: { category } }) => {\n        return (\n          <div>\n            <div className=\"uk-section\">\n              <div className=\"uk-container uk-container-large\">\n                <h1>{category.name}</h1>\n                <Articles articles={category.articles} />\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default Category;","// This is the app :)\n\nimport React from \"react\";\n\nimport { Switch, Route } from \"react-router-dom\"; // using the Switch and Route components from react-router-dom in order to establish a routing system for article page\n\nimport Nav from \"../../components/Nav\"; // import and declare Nav component in our App so it will show on every pages of our application \nimport Articles from \"../Articles\"; // import and declare Articles container\nimport Article from \"../Article\";\nimport Category from \"../Category\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Switch>\n        <Route path=\"/\" component={Articles} exact />\n        <Route path=\"/article/:id\" component={Article} exact />\n        <Route path=\"/category/:id\" component={Category} exact />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// Apollo is used to query Strapi with GraphQL\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: `${process.env.REACT_APP_BACKEND_URL}/graphql`\n});\nconst client = new ApolloClient({\n  cache,\n  link\n});\n\nexport default client;","// FRONT-END STRUCTURE\n\n// Point Apollo to http://localhost:1337/graphql to fetch data from Strapi server\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"./containers/App\";\nimport client from \"./utils/apolloClient\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\n\n// Wrap App inside Router\nReactDOM.render(\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}